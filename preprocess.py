# -*- coding: utf-8 -*-
"""Untitled12.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zOSxQro0ECDUzP_09iyIbh9mfrY9csqx
"""
import pandas as pd

# Load data into DataFrames
cycles = pd.read_csv('/data/train/cycles.csv')
feeds = pd.read_csv('/data/train/feeds.csv')
fasting = pd.read_csv('/data/train/fasting.csv')
harvests = pd.read_csv('/data/train/harvests.csv')
sampling = pd.read_csv('/data/train/sampling.csv')
measurements = pd.read_csv('/data/train/measurements.csv')

columns = ['id', 'started_at', 'finished_at', 'total_seed', 'area', 'pond_id']
cycles = pd.read_csv('cycles.csv')
cycles = cycles[columns]

columns = ['cycle_id', 'logged_at', 'quantity']
feeds = pd.read_csv('feeds.csv')
feeds = feeds[columns]

columns = ['cycle_id', 'logged_date', 'fasting']
fasting = pd.read_csv('fasting.csv')
fasting = fasting[columns]

columns = ['cycle_id', 'harvested_at', 'status', 'size', 'weight', 'selling_price']
harvests = pd.read_csv('harvests.csv')
harvests = harvests[columns]

columns = ['cycle_id', 'sampled_at', 'average_weight']
sampling = pd.read_csv('sampling.csv')
sampling = sampling[columns]

columns = ['cycle_id', 'measured_date', 'morning_temperature', 'evening_temperature',
               'morning_do', 'evening_do', 'morning_salinity', 'evening_salinity',
               'morning_pH', 'evening_pH', 'transparency', 'ammonia', 'nitrate',
               'nitrite', 'alkalinity', 'hardness', 'calcium', 'magnesium',
               'carbonate', 'bicarbonate', 'tom', 'total_plankton_']
measurements = pd.read_csv('measurements.csv')
measurements = measurements[columns]

print(harvests.describe())
print(harvests.info())
print(harvests.isnull().sum())

statuses = harvests['status'].unique()
print(statuses)

nostatus = harvests[harvests['status'].isna()]
print(nostatus.describe())
print(nostatus.info())
print(nostatus.isnull().sum())

for status in statuses:
    print(f"Status: {status}")
    print(harvests[harvests['status'] == status].describe())
    print("\n")
    print(harvests[harvests['status'] == status].info())
    print("\n")
    print(harvests[harvests['status'] == status].isnull().sum())
    print("\n")

harvests['selling_price'].loc[harvests['selling_price'].isna() & (harvests['status'] == 'Failed')] = 0

harvests.dropna(subset=['selling_price', 'status'], inplace=True)
print(harvests.describe())
print(harvests.info())
print(harvests.isnull().sum())

harvests['cycle_id'].nunique()

print(cycles.describe())
print(cycles.info())
print(cycles.isnull().sum())

data = pd.merge(cycles, harvests, left_on='id', right_on='cycle_id', how='inner')
data.drop('cycle_id', axis=1, inplace=True)
print(data.describe())
print(data.info())
print(data.isnull().sum())
print(data['id'].nunique())
data.head(20)

data['numbers'] = data['size'] * data['weight']
data.head(20)

data_agg = data.groupby('id').agg({'numbers': 'sum', 'weight': 'sum', 'selling_price': 'sum'})
data_agg.rename(columns={'numbers': 'total', 'weight': 'total_weight', 'selling_price': 'total_price'}, inplace=True)
data_agg.head(20)

data = data.merge(data_agg, on='id', how='left')
data_agg = data.drop(columns=['numbers', 'weight', 'selling_price'])
data_agg = data_agg.drop_duplicates(subset=['id'])
data_agg.head(20)

data_agg['avg_weight'] = data_agg['total_weight'] / data_agg['total']
data_agg.fillna(0, inplace=True)

print(data_agg.describe())
print(data_agg.info())
print(data_agg.isnull().sum())

data_agg['survival_rate'] = data_agg['total'] / data_agg['total_seed']
data_agg.head(20)

sampling['sampled_at'] = pd.to_datetime(sampling['sampled_at'], errors='coerce')
sampling = sampling.sort_values(by=['cycle_id','sampled_at'])

sampling['weight_diff'] = sampling.groupby('cycle_id')['average_weight'].diff()
sampling['time_diff'] = sampling.groupby('cycle_id')['sampled_at'].diff().dt.total_seconds() / (24 * 3600)
sampling['growth_rate'] = sampling['weight_diff'] / sampling['time_diff']
sampling.dropna(subset=['growth_rate'], inplace=True)
sampling_agg = sampling.groupby('cycle_id').agg({'growth_rate': 'mean'})

print(sampling_agg.describe())
print(sampling_agg.info())
print(sampling_agg.isnull().sum())

import numpy as np

sampling_agg = sampling_agg[np.isfinite(sampling_agg['growth_rate'])]
sampling_agg.dropna(inplace=True)
sampling_agg = sampling_agg[sampling_agg['growth_rate'] > 0]

print(sampling_agg.describe())
print(sampling_agg.info())
print(sampling_agg.isnull().sum())

data_agg = data_agg.merge(sampling_agg, left_on='id', right_on='cycle_id', how='left')
print(data_agg.describe())
print(data_agg.info())
print(data_agg.isnull().sum())

data_agg['started_at'] = pd.to_datetime(data_agg['started_at'])
data_agg['finished_at'] = pd.to_datetime(data_agg['finished_at'])
data_agg['harvested_at'] = pd.to_datetime(data_agg['harvested_at'])
data_agg['duration'] = (data_agg['finished_at'] - data_agg['started_at']).dt.total_seconds() / (24 * 3600)
data_agg['growth_rate'].fillna(data_agg['avg_weight']*1000 / data_agg['duration'], inplace=True)

print(data_agg.describe())
print(data_agg.info())
print(data_agg.isnull().sum())

feed_summary = feeds.groupby('cycle_id').agg({
    'quantity': ['sum', 'mean', 'count']
}).reset_index()
feed_summary.columns = ['cycle_id', 'total_feed', 'average_feed', 'feed_count']
data_agg = data_agg.merge(feed_summary, left_on='id', right_on='cycle_id', how='left')

print(data_agg.describe())
print(data_agg.info())
print(data_agg.isnull().sum())

fasting_summary = fasting.groupby('cycle_id')['fasting'].sum().reset_index()
fasting_summary.columns = ['cycle_id', 'fasting_days']
data_agg = data_agg.merge(fasting_summary, left_on='id', right_on='cycle_id', how='left')

print(data_agg.describe())
print(data_agg.info())
print(data_agg.isnull().sum())

data_agg['fasting_days'].fillna(0, inplace=True)
data_agg.drop(['cycle_id_x','cycle_id_y'], axis=1, inplace=True)
print(data_agg.describe())
print(data_agg.info())
print(data_agg.isnull().sum())

measurement_summary = measurements.groupby('cycle_id').agg({
    'morning_temperature': 'mean',
    'evening_temperature': 'mean',
    'morning_do': 'mean',
    'evening_do': 'mean',
    'morning_salinity': 'mean',
    'evening_salinity': 'mean',
    'morning_pH': 'mean',
    'evening_pH': 'mean',
    'transparency': 'mean',
    'ammonia': 'mean',
    'nitrate': 'mean',
    'nitrite': 'mean',
    'alkalinity': 'mean',
    'hardness': 'mean',
    'calcium': 'mean',
    'magnesium': 'mean',
    'carbonate': 'mean',
    'bicarbonate': 'mean',
    'tom': 'mean',
    'total_plankton_': 'mean'
}).reset_index()

# Flatten multi-level columns
measurement_summary.columns = ['cycle_id'] + [''.join(col).strip() for col in measurement_summary.columns.values[1:]]
data_agg = data_agg.merge(measurement_summary, left_on='id', right_on='cycle_id', how='left')
data_agg.drop('cycle_id', axis=1, inplace=True)

print(data_agg.describe())
print(data_agg.info())
print(data_agg.isnull().sum())

data_agg['morning_temperature'].fillna(data_agg['morning_temperature'].mean(), inplace=True)
data_agg['evening_temperature'].fillna(data_agg['evening_temperature'].mean(), inplace=True)
data_agg['morning_do'].fillna(data_agg['morning_do'].mean(), inplace=True)
data_agg['evening_do'].fillna(data_agg['evening_do'].mean(), inplace=True)
data_agg['morning_salinity'].fillna(data_agg['morning_salinity'].mean(), inplace=True)
data_agg['evening_salinity'].fillna(data_agg['evening_salinity'].mean(), inplace=True)
data_agg['morning_pH'].fillna(data_agg['morning_pH'].mean(), inplace=True)
data_agg['evening_pH'].fillna(data_agg['evening_pH'].mean(), inplace=True)
data_agg['transparency'].fillna(data_agg['transparency'].mean(), inplace=True)
data_agg['ammonia'].fillna(data_agg['ammonia'].mean(), inplace=True)
data_agg['nitrate'].fillna(data_agg['nitrate'].mean(), inplace=True)
data_agg['nitrite'].fillna(data_agg['nitrite'].mean(), inplace=True)
data_agg['alkalinity'].fillna(data_agg['alkalinity'].mean(), inplace=True)
data_agg['hardness'].fillna(data_agg['hardness'].mean(), inplace=True)
data_agg['calcium'].fillna(data_agg['calcium'].mean(), inplace=True)
data_agg['magnesium'].fillna(data_agg['magnesium'].mean(), inplace=True)
data_agg['carbonate'].fillna(data_agg['carbonate'].mean(), inplace=True)
data_agg['bicarbonate'].fillna(data_agg['bicarbonate'].mean(), inplace=True)
data_agg['tom'].fillna(data_agg['tom'].mean(), inplace=True)
data_agg['total_plankton_'].fillna(data_agg['total_plankton_'].mean(), inplace=True)

print(data_agg.describe())
print(data_agg.info())
print(data_agg.isnull().sum())

data_agg.to_csv('data_agg.csv', index=False)