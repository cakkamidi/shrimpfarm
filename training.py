# -*- coding: utf-8 -*-
"""Untitled13.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1y-Gkz2xgTsKcf5KuhjzSdvyhqEh03xrE
"""

import pandas as pd

data = pd.read_csv('/data/train/train.csv')

print(data.describe())
print(data.info())
data.head(20)

data = data.drop(['started_at', 'finished_at', 'harvested_at', 'pond_id'], axis=1)
data['avg_weight'] = data['avg_weight']*1000
data.head(20)

X = data.drop(['id', 'total_weight', 'survival_rate', 'avg_weight', 'selling_price', 'total', 'size', 'status'], axis=1)
X_SR = X.drop('total_seed', axis=1)
X_aw = X.drop(['growth_rate', 'duration'], axis=1)
y_SR = data['survival_rate']
y_biomass = data['total_weight']
y_avg_weight = data['avg_weight']
y_revenue = data['selling_price']

from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error, r2_score

# Split data into training and testing sets
X_train, X_test, y_train_sr, y_test_sr = train_test_split(X_SR, y_SR, test_size=0.2, random_state=0)
X_train_aw, X_test_aw, y_train_aw, y_test_aw = train_test_split(X_aw, y_avg_weight, test_size=0.2, random_state=0)
X_train_biomass, X_test_biomass, y_train_biomass, y_test_biomass = train_test_split(X, y_biomass, test_size=0.2, random_state=0)
X_train_revenue, X_test_revenue, y_train_revenue, y_test_revenue = train_test_split(X, y_revenue, test_size=0.2, random_state=0)

# Initialize models
model_sr = RandomForestRegressor(n_estimators=100, random_state=0)
model_aw = RandomForestRegressor(n_estimators=100, random_state=0)
model_biomass = RandomForestRegressor(n_estimators=100, random_state=0)
model_revenue = RandomForestRegressor(n_estimators=100, random_state=0)

# Train models
model_sr.fit(X_train, y_train_sr)
model_aw.fit(X_train_aw, y_train_aw)
model_biomass.fit(X_train_biomass, y_train_biomass)
model_revenue.fit(X_train_revenue, y_train_revenue)

# Make predictions
predictions_sr = model_sr.predict(X_test)
predictions_aw = model_aw.predict(X_test_aw)
predictions_biomass = model_biomass.predict(X_test_biomass)
predictions_revenue = model_revenue.predict(X_test_revenue)

# Evaluate models
print("Survival Rate Prediction")
print("MAE:", mean_absolute_error(y_test_sr, predictions_sr))
print("R²:", r2_score(y_test_sr, predictions_sr))

print("\nAverage Weight Prediction")
print("MAE:", mean_absolute_error(y_test_aw, predictions_aw))
print("R²:", r2_score(y_test_aw, predictions_aw))

print("\nBiomass Prediction")
print("MAE:", mean_absolute_error(y_test_biomass, predictions_biomass))
print("R²:", r2_score(y_test_biomass, predictions_biomass))

print("\nRevenue Prediction")
print("MAE:", mean_absolute_error(y_test_revenue, predictions_revenue))
print("R²:", r2_score(y_test_revenue, predictions_revenue))

# Feature importance for each model
import matplotlib.pyplot as plt
import numpy as np

def plot_feature_importance(model, X_train, title):
    importances = model.feature_importances_
    indices = np.argsort(importances)[::-1]
    plt.figure(figsize=(10, 6))
    plt.title(title)
    plt.bar(range(X_train.shape[1]), importances[indices], align="center")
    plt.xticks(range(X_train.shape[1]), X_train.columns[indices], rotation=90)
    plt.tight_layout()
    plt.show()

plot_feature_importance(model_sr, X_train, "Feature Importance - Survival Rate")
plot_feature_importance(model_aw, X_train_aw, "Feature Importance - Average Weight")
plot_feature_importance(model_biomass, X_train_biomass, "Feature Importance - Biomass")
plot_feature_importance(model_revenue, X_train_revenue, "Feature Importance - Revenue")